Articles:
	- https://www.stackrox.io/blog/kubernetes-networking-demystified/
	- https://scalingo.com/blog/iptables
	- https://serenafeng.github.io/2020/03/26/kube-proxy-in-iptables-mode/
	- https://stackoverflow.com/questions/53534553/kubernetes-cni-vs-kube-proxy 
	- https://jvns.ca/blog/2017/10/10/operating-a-kubernetes-network/

Videos:
	- https://www.youtube.com/watch?v=U35C0EPSwoY&list=PLSAko72nKb8QWsfPpBlsw-kOdMBD7sra-&index=2 
		- Pod networking
		- Slides are useful

Networking model:
	- CNI "container network interface"  https://github.com/containernetworking/cni
	- The model https://github.com/kubernetes/design-proposals-archive/blob/main/network/networking.md
		- container to container
		- pod to pod
		- pod to service
		- external to internal communication
	
	- Details
		- kube-proxy programs the linux kernel with the necessary things.
		- Each pod has an ip
		- Container to Container
			- all containers in a pod see each other on localhost
		- Pod to Pod
			- each pod has its own ip address (unique in the cluster)
			- calico defines a route entry for each pod that redirects traffic to an interface generated by it
					```172.16.196.148 dev calibd2348b4f67 scope link```
			- these are veth devices with one end in the pod's namespace and one end in the host's namespace
			- calico advertises pods ips with BGP
			- communication goes through the tunl0
			- check the cidr of each node with calico 'k describe blockaffinities <node>'

		- Pod to Service
			- each service has a virtual ip used to load-balance requests across the pods
			- each node runs a kube-proxy process which programs iptables rules to trap access 
				to service IPs and redirect them to the correct backends
			- Service type Cluster IP
				- virtual ip address  (this is why ping doesn't work)
				- after deployment, nothing changes in the routes of the controlplane
				- Now check what happens with the nat tables
					- save the pod ips
					- save the service ip
			- Service type NodePort
				- virtual ip address  (this is why ping doesn't work)
				- reserve a port on each node in the cluster
				- kube-proxy programs iptables to intercept connections to that port and 
					load balance them across the pods
				

Pod to Pod communication:
    - provide processes with their own system view
    - enable isolation between the processes
    - define the set of resources a process can see,manage
    - https://blog.quarkslab.com/digging-into-linux-namespaces-part-1.html


Pod to Service communication:
	1. ClusterIP services (./vms/k8s/nat-output)
	2. NodePort services (./node-port)